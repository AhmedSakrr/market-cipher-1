//@version=4
// Market Cipher (Not_MCB.txt)
// Overhauled by: Reid Litkauo aka crexalbo
// February 12, 2021
study(title="Not MCB (crexalbo)", shorttitle="Not MCB")

//##############################################################################
// Global Colors

// Zero-Line
color_zero = #888888

// Bull and Bear
color_bull = #00FF00
color_bear = #FF0000

// Momentum
color_p_leading    = #673AB7A0
color_p_trailing   = #BFE4FF
color_p_difference = #FFFF00

//##############################################################################
// Zero Line

// Simple, just a pronounced line at zero

// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
// Plot

plot( 0,
 title = "Zero Line",
 color = color_zero )

//##############################################################################
// OB-OS

// Over-Bought & Over-Sold
// These are lines/limits we set ourselves
// to indicate if a coin is being bought or sold TOO much.

// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
// Input

// TODO In the future, maybe we could have more "severity degrees/levels"?

// Over-Bought
obos_input_ob1 = input( title = "OB-OS: Over-Bought Level", defval = 60 )

// Over-Sold
obos_input_os1 = input( title = "OB-OS: Over-Sold Level", defval = -60 )

// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
// Plot

// Let's use a dotted line to plot each of these levels

plot( obos_input_ob1,
 title = "Over-Bought Level",
 color = color_bear,
 style = 3 )

plot( obos_input_os1,
 title = "Over-Sold Level",
 color = color_bull,
 style = 3 )

//##############################################################################
// RSI-MFI

// Relative Strength Index / Money Flow Index
// A measure of fiat moving into or out of the market.

// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
// Input

// What moving average function should we use?
mfi_input_mafn = input( title="RSI-MFI: Moving Average Function", options=["RMA","SMA","EMA","WMA","VWMA"], defval="SMA" )

// How many data points should this moving average use?
mfi_input_period = input( title = "RSI-MFI: Moving Average Length", defval = 60 )

// Scale the RSI-MFI graph to fit nicely on top of everything else.	
mfi_input_scale = input( title = "RSI-MFI: Scale of Graph", defval = 190 )

// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
// Calculate

// Candle value (series)
// This formula normalizes candles relative to each other.
// Exact values won't matter, only how erratic / impactful a candle was.
mfi_candle_value = (close - open) / (high - low)

// Apply the moving average function requested by the inputs to the candle value
if mfi_input_mafn == "RMA"
	mfi_candle_value :=  rma(mfi_candle_value, mfi_input_period)
if mfi_input_mafn == "SMA"
	mfi_candle_value :=  sma(mfi_candle_value, mfi_input_period)
if mfi_input_mafn == "EMA"
	mfi_candle_value :=  ema(mfi_candle_value, mfi_input_period)
if mfi_input_mafn == "WMA"
	mfi_candle_value :=  wma(mfi_candle_value, mfi_input_period)
if mfi_input_mafn == "VWMA"
	mfi_candle_value := vwma(mfi_candle_value, mfi_input_period)

// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
// Plot

// Determine what color the graph should be at any one point
mfi_plot_color = mfi_candle_value > 0 ? color_bull : color_bear

// Plot the RSI-MFI line
// Scale it using the input so it fits nicely
// Color it appropriately and make it slightly transparent
mfi_plot_line = plot( mfi_candle_value * mfi_input_scale,
 title = "RSI-MFI",
 color = mfi_plot_color,
 transp = 35 )

// Fill between the RSI-MFI and the zero line
fill( mfi_plot_line, plot(0),
 mfi_plot_color,
 transp = 50 )

//##############################################################################
// Wave Trend Indicator

// Originally written by LazyBear:
// https://www.tradingview.com/script/2KE8wTuF-Indicator-WaveTrend-Oscillator-WT/

// The prefix is "p" because that's what physicists use for momemtum,
// which is what this indicator is frequently referred to.

// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
// Input

// Channel Length
// TODO wtf is this and why is it important
p_input_channel = input( title = "Momentum: Channel Length", defval = 9 )

// Average Length
// TDO wtf is this and why is it important
p_input_average = input( title = "Momentum: Average Length", defval = 12 )

// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
// Calculate

// A lot of this explanation is taken from here:
// https://medium.com/@samuel.mcculloch/lets-take-a-look-at-wavetrend-with-crosses-lazybear-s-indicator-2ece1737f72f

// TODO This entire calculate section is a black box! I MUST UNDERSTAND!
// I have no idea what this code does or what each variable represents.
// I've given the variables a prefix to prevent naming collisions, and renamed
// inputs appropriately, but otherwise the code remains unchanged.

// HLC3 = (hi + lo + close) / 3 (native global)
// EMA  = Exponential Moving Average
// ESA  = Exponential S? Average
// D    = ???
// CI   = ???
// TCI  = Trading Center Indicator?
// WT   = Weight?

p_ap = hlc3 
p_esa = ema(p_ap, p_input_channel)
p_d = ema(abs(p_ap - p_esa), p_input_channel)
p_ci = (p_ap - p_esa) / (0.015 * p_d)
p_tci = ema(p_ci, p_input_average)

p_wt1 = p_tci
p_wt2 = sma(p_wt1,3)

// wt1 is the lighter trailing wave
// wt2 is the darker leading wave

// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
// Plot

// Plot leading, trailing, and difference waves

plot( p_wt1,
 title = "Trailing Momentum",
 color = color_p_trailing,
 style = 4 )

plot( p_wt2,
 title = "Leading Momentum",
 color = color_p_leading,
 style = 4 )

plot( p_wt1 - p_wt2,
 title  = "Difference Momentum",
 color  = color_p_difference,
 style  = 4,
 transp = 40 )

// Plot crossovers
// Point out where the leading and trailing momentum graphs intersect.

plotshape( crossover(p_wt1, p_wt2) and obos_input_os1 ? p_wt2 : na,
 title = "Momentum Crossover (Positive)",
 color = color_bull,
 style = shape.cross,
 location = location.absolute,
 size = size.tiny,
 transp = 20 )

plotshape( crossover(p_wt2, p_wt1) and obos_input_os1 ? p_wt1 : na,
 title = "Momentum Crossover (Negative)",
 color = color_bear,
 style = shape.cross,
 location = location.absolute,
 size = size.tiny,
 transp = 20 )

plotshape( crossover(p_wt1, p_wt2) and p_wt2 <= obos_input_os1 ? p_wt2 : na,
 title = "Momentum Crossover (Positive)",
 color = color_bull,
 style = shape.circle,
 location = location.bottom,
 size = size.tiny,
 transp = 20 )

plotshape( crossover(p_wt2, p_wt1) and p_wt1 >= obos_input_ob1 ? p_wt2 : na,
 title = "Momentum Crossover (Negative)",
 color = color_bear,
 style = shape.circle,
 location = location.top,
 size = size.tiny,
 transp = 20 )

//##############################################################################
// Stochastic Oscillator









//soch RSI with divergences
smoothKw = input(3, minval=1)
smoothDw = input(3, minval=1)
lengthRSIw = input(14, minval=1)
lengthStochw = input(14, minval=1)
uselogw = input(true, title="Log")
srcInw = input(close, type=source, title="Source")
showdivsw = input(true, title="Show Divergences")
showhiddenw = input(false, title="Show Hidden Divergences")
showchanw = input(false, title="Show Divergences Channel")


srcw = uselogw ? log(srcInw) : srcInw
rsi1w = rsi(srcw, lengthRSIw)
kkw = sma(stoch(rsi1w, rsi1w, rsi1w, lengthStochw), smoothKw)
dw = sma(kkw, smoothDw)
hmw = input(false, title="Use Average of both K & D")
kw = hmw ? avg(kkw, dw) : kkw

aw = plot(kkw, color=blue, linewidth=1, transp=0, title="K")
bw = plot(dw, color=orange, linewidth=1, transp=0, title="D")
fw = kkw >= dw ? blue : orange
fill(aw, bw, title="KD Fill", color=white)
